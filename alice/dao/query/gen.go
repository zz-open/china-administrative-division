// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q        = new(Query)
	City     *city
	County   *county
	Province *province
	Town     *town
	Village  *village
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	City = &Q.City
	County = &Q.County
	Province = &Q.Province
	Town = &Q.Town
	Village = &Q.Village
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:       db,
		City:     newCity(db, opts...),
		County:   newCounty(db, opts...),
		Province: newProvince(db, opts...),
		Town:     newTown(db, opts...),
		Village:  newVillage(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	City     city
	County   county
	Province province
	Town     town
	Village  village
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		City:     q.City.clone(db),
		County:   q.County.clone(db),
		Province: q.Province.clone(db),
		Town:     q.Town.clone(db),
		Village:  q.Village.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		City:     q.City.replaceDB(db),
		County:   q.County.replaceDB(db),
		Province: q.Province.replaceDB(db),
		Town:     q.Town.replaceDB(db),
		Village:  q.Village.replaceDB(db),
	}
}

type queryCtx struct {
	City     ICityDo
	County   ICountyDo
	Province IProvinceDo
	Town     ITownDo
	Village  IVillageDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		City:     q.City.WithContext(ctx),
		County:   q.County.WithContext(ctx),
		Province: q.Province.WithContext(ctx),
		Town:     q.Town.WithContext(ctx),
		Village:  q.Village.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
