// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"alice/dao/model"
)

func newProvince(db *gorm.DB, opts ...gen.DOOption) province {
	_province := province{}

	_province.provinceDo.UseDB(db, opts...)
	_province.provinceDo.UseModel(&model.Province{})

	tableName := _province.provinceDo.TableName()
	_province.ALL = field.NewAsterisk(tableName)
	_province.ID = field.NewInt64(tableName, "id")
	_province.Name = field.NewString(tableName, "name")
	_province.Code = field.NewString(tableName, "code")
	_province.FullCode = field.NewString(tableName, "full_code")
	_province.URL = field.NewString(tableName, "url")
	_province.ChildURL = field.NewString(tableName, "child_url")
	_province.IsMunicipality = field.NewBool(tableName, "is_municipality")
	_province.Creator = field.NewString(tableName, "creator")
	_province.Updater = field.NewString(tableName, "updater")
	_province.CreatedAt = field.NewTime(tableName, "created_at")
	_province.UpdatedAt = field.NewTime(tableName, "updated_at")
	_province.DataUpdatedAt = field.NewTime(tableName, "data_updated_at")

	_province.fillFieldMap()

	return _province
}

// province 省份表
type province struct {
	provinceDo

	ALL            field.Asterisk
	ID             field.Int64
	Name           field.String // 省名称
	Code           field.String // 省级代码
	FullCode       field.String // 统计用区划代码
	URL            field.String // 被抓取的url
	ChildURL       field.String // 指向的子url
	IsMunicipality field.Bool   // 是不是直辖市:1-是;0-否
	Creator        field.String // 创建者
	Updater        field.String // 更新者
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 更新时间
	DataUpdatedAt  field.Time   // 数据更新时间

	fieldMap map[string]field.Expr
}

func (p province) Table(newTableName string) *province {
	p.provinceDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p province) As(alias string) *province {
	p.provinceDo.DO = *(p.provinceDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *province) updateTableName(table string) *province {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Name = field.NewString(table, "name")
	p.Code = field.NewString(table, "code")
	p.FullCode = field.NewString(table, "full_code")
	p.URL = field.NewString(table, "url")
	p.ChildURL = field.NewString(table, "child_url")
	p.IsMunicipality = field.NewBool(table, "is_municipality")
	p.Creator = field.NewString(table, "creator")
	p.Updater = field.NewString(table, "updater")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DataUpdatedAt = field.NewTime(table, "data_updated_at")

	p.fillFieldMap()

	return p
}

func (p *province) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *province) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["code"] = p.Code
	p.fieldMap["full_code"] = p.FullCode
	p.fieldMap["url"] = p.URL
	p.fieldMap["child_url"] = p.ChildURL
	p.fieldMap["is_municipality"] = p.IsMunicipality
	p.fieldMap["creator"] = p.Creator
	p.fieldMap["updater"] = p.Updater
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["data_updated_at"] = p.DataUpdatedAt
}

func (p province) clone(db *gorm.DB) province {
	p.provinceDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p province) replaceDB(db *gorm.DB) province {
	p.provinceDo.ReplaceDB(db)
	return p
}

type provinceDo struct{ gen.DO }

type IProvinceDo interface {
	gen.SubQuery
	Debug() IProvinceDo
	WithContext(ctx context.Context) IProvinceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProvinceDo
	WriteDB() IProvinceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProvinceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProvinceDo
	Not(conds ...gen.Condition) IProvinceDo
	Or(conds ...gen.Condition) IProvinceDo
	Select(conds ...field.Expr) IProvinceDo
	Where(conds ...gen.Condition) IProvinceDo
	Order(conds ...field.Expr) IProvinceDo
	Distinct(cols ...field.Expr) IProvinceDo
	Omit(cols ...field.Expr) IProvinceDo
	Join(table schema.Tabler, on ...field.Expr) IProvinceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProvinceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProvinceDo
	Group(cols ...field.Expr) IProvinceDo
	Having(conds ...gen.Condition) IProvinceDo
	Limit(limit int) IProvinceDo
	Offset(offset int) IProvinceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProvinceDo
	Unscoped() IProvinceDo
	Create(values ...*model.Province) error
	CreateInBatches(values []*model.Province, batchSize int) error
	Save(values ...*model.Province) error
	First() (*model.Province, error)
	Take() (*model.Province, error)
	Last() (*model.Province, error)
	Find() ([]*model.Province, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Province, err error)
	FindInBatches(result *[]*model.Province, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Province) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProvinceDo
	Assign(attrs ...field.AssignExpr) IProvinceDo
	Joins(fields ...field.RelationField) IProvinceDo
	Preload(fields ...field.RelationField) IProvinceDo
	FirstOrInit() (*model.Province, error)
	FirstOrCreate() (*model.Province, error)
	FindByPage(offset int, limit int) (result []*model.Province, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProvinceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p provinceDo) Debug() IProvinceDo {
	return p.withDO(p.DO.Debug())
}

func (p provinceDo) WithContext(ctx context.Context) IProvinceDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p provinceDo) ReadDB() IProvinceDo {
	return p.Clauses(dbresolver.Read)
}

func (p provinceDo) WriteDB() IProvinceDo {
	return p.Clauses(dbresolver.Write)
}

func (p provinceDo) Session(config *gorm.Session) IProvinceDo {
	return p.withDO(p.DO.Session(config))
}

func (p provinceDo) Clauses(conds ...clause.Expression) IProvinceDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p provinceDo) Returning(value interface{}, columns ...string) IProvinceDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p provinceDo) Not(conds ...gen.Condition) IProvinceDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p provinceDo) Or(conds ...gen.Condition) IProvinceDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p provinceDo) Select(conds ...field.Expr) IProvinceDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p provinceDo) Where(conds ...gen.Condition) IProvinceDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p provinceDo) Order(conds ...field.Expr) IProvinceDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p provinceDo) Distinct(cols ...field.Expr) IProvinceDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p provinceDo) Omit(cols ...field.Expr) IProvinceDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p provinceDo) Join(table schema.Tabler, on ...field.Expr) IProvinceDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p provinceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProvinceDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p provinceDo) RightJoin(table schema.Tabler, on ...field.Expr) IProvinceDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p provinceDo) Group(cols ...field.Expr) IProvinceDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p provinceDo) Having(conds ...gen.Condition) IProvinceDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p provinceDo) Limit(limit int) IProvinceDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p provinceDo) Offset(offset int) IProvinceDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p provinceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProvinceDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p provinceDo) Unscoped() IProvinceDo {
	return p.withDO(p.DO.Unscoped())
}

func (p provinceDo) Create(values ...*model.Province) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p provinceDo) CreateInBatches(values []*model.Province, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p provinceDo) Save(values ...*model.Province) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p provinceDo) First() (*model.Province, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Province), nil
	}
}

func (p provinceDo) Take() (*model.Province, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Province), nil
	}
}

func (p provinceDo) Last() (*model.Province, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Province), nil
	}
}

func (p provinceDo) Find() ([]*model.Province, error) {
	result, err := p.DO.Find()
	return result.([]*model.Province), err
}

func (p provinceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Province, err error) {
	buf := make([]*model.Province, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p provinceDo) FindInBatches(result *[]*model.Province, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p provinceDo) Attrs(attrs ...field.AssignExpr) IProvinceDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p provinceDo) Assign(attrs ...field.AssignExpr) IProvinceDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p provinceDo) Joins(fields ...field.RelationField) IProvinceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p provinceDo) Preload(fields ...field.RelationField) IProvinceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p provinceDo) FirstOrInit() (*model.Province, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Province), nil
	}
}

func (p provinceDo) FirstOrCreate() (*model.Province, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Province), nil
	}
}

func (p provinceDo) FindByPage(offset int, limit int) (result []*model.Province, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p provinceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p provinceDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p provinceDo) Delete(models ...*model.Province) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *provinceDo) withDO(do gen.Dao) *provinceDo {
	p.DO = *do.(*gen.DO)
	return p
}
