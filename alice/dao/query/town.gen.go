// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"alice/dao/model"
)

func newTown(db *gorm.DB, opts ...gen.DOOption) town {
	_town := town{}

	_town.townDo.UseDB(db, opts...)
	_town.townDo.UseModel(&model.Town{})

	tableName := _town.townDo.TableName()
	_town.ALL = field.NewAsterisk(tableName)
	_town.ID = field.NewInt64(tableName, "id")
	_town.Name = field.NewString(tableName, "name")
	_town.Code = field.NewString(tableName, "code")
	_town.FullCode = field.NewString(tableName, "full_code")
	_town.ProvinceID = field.NewInt64(tableName, "province_id")
	_town.CityID = field.NewInt64(tableName, "city_id")
	_town.CountyID = field.NewInt64(tableName, "county_id")
	_town.URL = field.NewString(tableName, "url")
	_town.ChildURL = field.NewString(tableName, "child_url")
	_town.Creator = field.NewString(tableName, "creator")
	_town.Updater = field.NewString(tableName, "updater")
	_town.CreatedAt = field.NewTime(tableName, "created_at")
	_town.UpdatedAt = field.NewTime(tableName, "updated_at")
	_town.DataUpdatedAt = field.NewTime(tableName, "data_updated_at")

	_town.fillFieldMap()

	return _town
}

// town 乡镇表
type town struct {
	townDo

	ALL           field.Asterisk
	ID            field.Int64
	Name          field.String // 乡镇名称
	Code          field.String // 乡级代码
	FullCode      field.String // 统计用区划代码
	ProvinceID    field.Int64  // province表id字段
	CityID        field.Int64  // city表id字段
	CountyID      field.Int64  // county表id字段
	URL           field.String // 被抓取的url
	ChildURL      field.String // 指向的子url
	Creator       field.String // 创建者
	Updater       field.String // 更新者
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间
	DataUpdatedAt field.Time   // 数据更新时间

	fieldMap map[string]field.Expr
}

func (t town) Table(newTableName string) *town {
	t.townDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t town) As(alias string) *town {
	t.townDo.DO = *(t.townDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *town) updateTableName(table string) *town {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.Code = field.NewString(table, "code")
	t.FullCode = field.NewString(table, "full_code")
	t.ProvinceID = field.NewInt64(table, "province_id")
	t.CityID = field.NewInt64(table, "city_id")
	t.CountyID = field.NewInt64(table, "county_id")
	t.URL = field.NewString(table, "url")
	t.ChildURL = field.NewString(table, "child_url")
	t.Creator = field.NewString(table, "creator")
	t.Updater = field.NewString(table, "updater")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DataUpdatedAt = field.NewTime(table, "data_updated_at")

	t.fillFieldMap()

	return t
}

func (t *town) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *town) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["code"] = t.Code
	t.fieldMap["full_code"] = t.FullCode
	t.fieldMap["province_id"] = t.ProvinceID
	t.fieldMap["city_id"] = t.CityID
	t.fieldMap["county_id"] = t.CountyID
	t.fieldMap["url"] = t.URL
	t.fieldMap["child_url"] = t.ChildURL
	t.fieldMap["creator"] = t.Creator
	t.fieldMap["updater"] = t.Updater
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["data_updated_at"] = t.DataUpdatedAt
}

func (t town) clone(db *gorm.DB) town {
	t.townDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t town) replaceDB(db *gorm.DB) town {
	t.townDo.ReplaceDB(db)
	return t
}

type townDo struct{ gen.DO }

type ITownDo interface {
	gen.SubQuery
	Debug() ITownDo
	WithContext(ctx context.Context) ITownDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITownDo
	WriteDB() ITownDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITownDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITownDo
	Not(conds ...gen.Condition) ITownDo
	Or(conds ...gen.Condition) ITownDo
	Select(conds ...field.Expr) ITownDo
	Where(conds ...gen.Condition) ITownDo
	Order(conds ...field.Expr) ITownDo
	Distinct(cols ...field.Expr) ITownDo
	Omit(cols ...field.Expr) ITownDo
	Join(table schema.Tabler, on ...field.Expr) ITownDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITownDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITownDo
	Group(cols ...field.Expr) ITownDo
	Having(conds ...gen.Condition) ITownDo
	Limit(limit int) ITownDo
	Offset(offset int) ITownDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITownDo
	Unscoped() ITownDo
	Create(values ...*model.Town) error
	CreateInBatches(values []*model.Town, batchSize int) error
	Save(values ...*model.Town) error
	First() (*model.Town, error)
	Take() (*model.Town, error)
	Last() (*model.Town, error)
	Find() ([]*model.Town, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Town, err error)
	FindInBatches(result *[]*model.Town, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Town) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITownDo
	Assign(attrs ...field.AssignExpr) ITownDo
	Joins(fields ...field.RelationField) ITownDo
	Preload(fields ...field.RelationField) ITownDo
	FirstOrInit() (*model.Town, error)
	FirstOrCreate() (*model.Town, error)
	FindByPage(offset int, limit int) (result []*model.Town, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITownDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t townDo) Debug() ITownDo {
	return t.withDO(t.DO.Debug())
}

func (t townDo) WithContext(ctx context.Context) ITownDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t townDo) ReadDB() ITownDo {
	return t.Clauses(dbresolver.Read)
}

func (t townDo) WriteDB() ITownDo {
	return t.Clauses(dbresolver.Write)
}

func (t townDo) Session(config *gorm.Session) ITownDo {
	return t.withDO(t.DO.Session(config))
}

func (t townDo) Clauses(conds ...clause.Expression) ITownDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t townDo) Returning(value interface{}, columns ...string) ITownDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t townDo) Not(conds ...gen.Condition) ITownDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t townDo) Or(conds ...gen.Condition) ITownDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t townDo) Select(conds ...field.Expr) ITownDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t townDo) Where(conds ...gen.Condition) ITownDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t townDo) Order(conds ...field.Expr) ITownDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t townDo) Distinct(cols ...field.Expr) ITownDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t townDo) Omit(cols ...field.Expr) ITownDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t townDo) Join(table schema.Tabler, on ...field.Expr) ITownDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t townDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITownDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t townDo) RightJoin(table schema.Tabler, on ...field.Expr) ITownDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t townDo) Group(cols ...field.Expr) ITownDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t townDo) Having(conds ...gen.Condition) ITownDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t townDo) Limit(limit int) ITownDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t townDo) Offset(offset int) ITownDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t townDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITownDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t townDo) Unscoped() ITownDo {
	return t.withDO(t.DO.Unscoped())
}

func (t townDo) Create(values ...*model.Town) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t townDo) CreateInBatches(values []*model.Town, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t townDo) Save(values ...*model.Town) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t townDo) First() (*model.Town, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Town), nil
	}
}

func (t townDo) Take() (*model.Town, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Town), nil
	}
}

func (t townDo) Last() (*model.Town, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Town), nil
	}
}

func (t townDo) Find() ([]*model.Town, error) {
	result, err := t.DO.Find()
	return result.([]*model.Town), err
}

func (t townDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Town, err error) {
	buf := make([]*model.Town, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t townDo) FindInBatches(result *[]*model.Town, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t townDo) Attrs(attrs ...field.AssignExpr) ITownDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t townDo) Assign(attrs ...field.AssignExpr) ITownDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t townDo) Joins(fields ...field.RelationField) ITownDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t townDo) Preload(fields ...field.RelationField) ITownDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t townDo) FirstOrInit() (*model.Town, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Town), nil
	}
}

func (t townDo) FirstOrCreate() (*model.Town, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Town), nil
	}
}

func (t townDo) FindByPage(offset int, limit int) (result []*model.Town, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t townDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t townDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t townDo) Delete(models ...*model.Town) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *townDo) withDO(do gen.Dao) *townDo {
	t.DO = *do.(*gen.DO)
	return t
}
