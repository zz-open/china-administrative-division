// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"alice/dao/model"
)

func newCounty(db *gorm.DB, opts ...gen.DOOption) county {
	_county := county{}

	_county.countyDo.UseDB(db, opts...)
	_county.countyDo.UseModel(&model.County{})

	tableName := _county.countyDo.TableName()
	_county.ALL = field.NewAsterisk(tableName)
	_county.ID = field.NewInt64(tableName, "id")
	_county.Name = field.NewString(tableName, "name")
	_county.Code = field.NewString(tableName, "code")
	_county.ProvinceID = field.NewInt64(tableName, "province_id")
	_county.CityID = field.NewInt64(tableName, "city_id")
	_county.URL = field.NewString(tableName, "url")
	_county.ChildURL = field.NewString(tableName, "child_url")
	_county.Creator = field.NewString(tableName, "creator")
	_county.Updater = field.NewString(tableName, "updater")
	_county.CreatedAt = field.NewTime(tableName, "created_at")
	_county.UpdatedAt = field.NewTime(tableName, "updated_at")
	_county.DataUpdatedAt = field.NewTime(tableName, "data_updated_at")

	_county.fillFieldMap()

	return _county
}

// county 县城表
type county struct {
	countyDo

	ALL           field.Asterisk
	ID            field.Int64
	Name          field.String // 县名称
	Code          field.String // 统计用区划代码
	ProvinceID    field.Int64  // province表id字段
	CityID        field.Int64  // city表id字段
	URL           field.String // 被抓取的url
	ChildURL      field.String // 指向的子url
	Creator       field.String // 创建者
	Updater       field.String // 更新者
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间
	DataUpdatedAt field.Time   // 数据更新时间

	fieldMap map[string]field.Expr
}

func (c county) Table(newTableName string) *county {
	c.countyDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c county) As(alias string) *county {
	c.countyDo.DO = *(c.countyDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *county) updateTableName(table string) *county {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Name = field.NewString(table, "name")
	c.Code = field.NewString(table, "code")
	c.ProvinceID = field.NewInt64(table, "province_id")
	c.CityID = field.NewInt64(table, "city_id")
	c.URL = field.NewString(table, "url")
	c.ChildURL = field.NewString(table, "child_url")
	c.Creator = field.NewString(table, "creator")
	c.Updater = field.NewString(table, "updater")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DataUpdatedAt = field.NewTime(table, "data_updated_at")

	c.fillFieldMap()

	return c
}

func (c *county) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *county) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["code"] = c.Code
	c.fieldMap["province_id"] = c.ProvinceID
	c.fieldMap["city_id"] = c.CityID
	c.fieldMap["url"] = c.URL
	c.fieldMap["child_url"] = c.ChildURL
	c.fieldMap["creator"] = c.Creator
	c.fieldMap["updater"] = c.Updater
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["data_updated_at"] = c.DataUpdatedAt
}

func (c county) clone(db *gorm.DB) county {
	c.countyDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c county) replaceDB(db *gorm.DB) county {
	c.countyDo.ReplaceDB(db)
	return c
}

type countyDo struct{ gen.DO }

type ICountyDo interface {
	gen.SubQuery
	Debug() ICountyDo
	WithContext(ctx context.Context) ICountyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICountyDo
	WriteDB() ICountyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICountyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICountyDo
	Not(conds ...gen.Condition) ICountyDo
	Or(conds ...gen.Condition) ICountyDo
	Select(conds ...field.Expr) ICountyDo
	Where(conds ...gen.Condition) ICountyDo
	Order(conds ...field.Expr) ICountyDo
	Distinct(cols ...field.Expr) ICountyDo
	Omit(cols ...field.Expr) ICountyDo
	Join(table schema.Tabler, on ...field.Expr) ICountyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICountyDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICountyDo
	Group(cols ...field.Expr) ICountyDo
	Having(conds ...gen.Condition) ICountyDo
	Limit(limit int) ICountyDo
	Offset(offset int) ICountyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICountyDo
	Unscoped() ICountyDo
	Create(values ...*model.County) error
	CreateInBatches(values []*model.County, batchSize int) error
	Save(values ...*model.County) error
	First() (*model.County, error)
	Take() (*model.County, error)
	Last() (*model.County, error)
	Find() ([]*model.County, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.County, err error)
	FindInBatches(result *[]*model.County, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.County) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICountyDo
	Assign(attrs ...field.AssignExpr) ICountyDo
	Joins(fields ...field.RelationField) ICountyDo
	Preload(fields ...field.RelationField) ICountyDo
	FirstOrInit() (*model.County, error)
	FirstOrCreate() (*model.County, error)
	FindByPage(offset int, limit int) (result []*model.County, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICountyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c countyDo) Debug() ICountyDo {
	return c.withDO(c.DO.Debug())
}

func (c countyDo) WithContext(ctx context.Context) ICountyDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c countyDo) ReadDB() ICountyDo {
	return c.Clauses(dbresolver.Read)
}

func (c countyDo) WriteDB() ICountyDo {
	return c.Clauses(dbresolver.Write)
}

func (c countyDo) Session(config *gorm.Session) ICountyDo {
	return c.withDO(c.DO.Session(config))
}

func (c countyDo) Clauses(conds ...clause.Expression) ICountyDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c countyDo) Returning(value interface{}, columns ...string) ICountyDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c countyDo) Not(conds ...gen.Condition) ICountyDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c countyDo) Or(conds ...gen.Condition) ICountyDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c countyDo) Select(conds ...field.Expr) ICountyDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c countyDo) Where(conds ...gen.Condition) ICountyDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c countyDo) Order(conds ...field.Expr) ICountyDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c countyDo) Distinct(cols ...field.Expr) ICountyDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c countyDo) Omit(cols ...field.Expr) ICountyDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c countyDo) Join(table schema.Tabler, on ...field.Expr) ICountyDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c countyDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICountyDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c countyDo) RightJoin(table schema.Tabler, on ...field.Expr) ICountyDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c countyDo) Group(cols ...field.Expr) ICountyDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c countyDo) Having(conds ...gen.Condition) ICountyDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c countyDo) Limit(limit int) ICountyDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c countyDo) Offset(offset int) ICountyDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c countyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICountyDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c countyDo) Unscoped() ICountyDo {
	return c.withDO(c.DO.Unscoped())
}

func (c countyDo) Create(values ...*model.County) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c countyDo) CreateInBatches(values []*model.County, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c countyDo) Save(values ...*model.County) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c countyDo) First() (*model.County, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.County), nil
	}
}

func (c countyDo) Take() (*model.County, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.County), nil
	}
}

func (c countyDo) Last() (*model.County, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.County), nil
	}
}

func (c countyDo) Find() ([]*model.County, error) {
	result, err := c.DO.Find()
	return result.([]*model.County), err
}

func (c countyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.County, err error) {
	buf := make([]*model.County, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c countyDo) FindInBatches(result *[]*model.County, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c countyDo) Attrs(attrs ...field.AssignExpr) ICountyDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c countyDo) Assign(attrs ...field.AssignExpr) ICountyDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c countyDo) Joins(fields ...field.RelationField) ICountyDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c countyDo) Preload(fields ...field.RelationField) ICountyDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c countyDo) FirstOrInit() (*model.County, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.County), nil
	}
}

func (c countyDo) FirstOrCreate() (*model.County, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.County), nil
	}
}

func (c countyDo) FindByPage(offset int, limit int) (result []*model.County, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c countyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c countyDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c countyDo) Delete(models ...*model.County) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *countyDo) withDO(do gen.Dao) *countyDo {
	c.DO = *do.(*gen.DO)
	return c
}
