// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	villageFieldNames          = builder.RawFieldNames(&Village{})
	villageRows                = strings.Join(villageFieldNames, ",")
	villageRowsExpectAutoSet   = strings.Join(stringx.Remove(villageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	villageRowsWithPlaceHolder = strings.Join(stringx.Remove(villageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	villageModel interface {
		Insert(ctx context.Context, data *Village) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Village, error)
		Update(ctx context.Context, data *Village) error
		Delete(ctx context.Context, id int64) error
	}

	defaultVillageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Village struct {
		Id            int64     `db:"id"`
		Name          string    `db:"name"`            // 村庄名称
		Code          string    `db:"code"`            // 统计用区划代码
		ClassifyCode  string    `db:"classify_code"`   // 城乡分类码
		ProvinceId    int64     `db:"province_id"`     // province表id字段
		CityId        int64     `db:"city_id"`         // city表id字段
		CountyId      int64     `db:"county_id"`       // county表id字段
		TownId        int64     `db:"town_id"`         // town表id字段
		Url           string    `db:"url"`             // 被抓取的url
		Creator       string    `db:"creator"`         // 创建者
		Updater       string    `db:"updater"`         // 更新者
		CreatedAt     time.Time `db:"created_at"`      // 创建时间
		UpdatedAt     time.Time `db:"updated_at"`      // 更新时间
		DataUpdatedAt time.Time `db:"data_updated_at"` // 数据更新时间
	}
)

func newVillageModel(conn sqlx.SqlConn) *defaultVillageModel {
	return &defaultVillageModel{
		conn:  conn,
		table: "`village`",
	}
}

func (m *defaultVillageModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultVillageModel) FindOne(ctx context.Context, id int64) (*Village, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", villageRows, m.table)
	var resp Village
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVillageModel) Insert(ctx context.Context, data *Village) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, villageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Code, data.ClassifyCode, data.ProvinceId, data.CityId, data.CountyId, data.TownId, data.Url, data.Creator, data.Updater, data.DataUpdatedAt)
	return ret, err
}

func (m *defaultVillageModel) Update(ctx context.Context, data *Village) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, villageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Code, data.ClassifyCode, data.ProvinceId, data.CityId, data.CountyId, data.TownId, data.Url, data.Creator, data.Updater, data.DataUpdatedAt, data.Id)
	return err
}

func (m *defaultVillageModel) tableName() string {
	return m.table
}
